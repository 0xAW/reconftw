#!/bin/bash

# Variables
AMASS_ENUM_TIMEOUT=10m
DIFF=false
SUBPASSIVE=false
RUNAMASS=false
RUNSUBFINDER=false
DEEP=false
INSCOPE=false

# Help menu
function display_help() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -d, --domain          Set the target domain."
    echo "  -a, --amass           Run amass."
    echo "  -s, --subfinder       Run subfinder."
    echo "  -g, --github-tokens   Specify GitHub tokens file."
    echo "  -l, --gitlab-tokens   Specify GitLab tokens file."
    echo "  -D, --deep            Run in deep mode."
    echo "  -i, --inscope         Check inscope."
    echo "  -h, --help            Display this help menu."
}

function start_subfunc() {
    echo "[+] Starting $1: $2"
}

function end_subfunc() {
    echo "[+] Ending $1: $2"
}

function check_inscope() {
    echo "Checking inscope for $1"
    # TODO: Add your inscope logic here
}

# Input validation and argument parsing
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -d|--domain) domain="$2"; shift;;
        -a|--amass) RUNAMASS=true;;
        -s|--subfinder) RUNSUBFINDER=true;;
        -g|--github-tokens) GITHUB_TOKENS="$2"; shift;;
        -l|--gitlab-tokens) GITLAB_TOKENS="$2"; shift;;
        -D|--deep) DEEP=true;;
        -i|--inscope) INSCOPE=true;;
        -h|--help) display_help; exit 0;;
        *) echo "Unknown parameter passed: $1"; display_help; exit 1;;
    esac
    shift
done

# Main functionality
if [[ ! -f "$called_fn_dir/.$0" ]] || [[ "$DIFF" = true ]] && [[ "$SUBPASSIVE" = true ]]; then
    start_subfunc $0 "Running : Passive Subdomain Enumeration"

    [[ $RUNAMASS == true ]] && timeout -k 1m ${AMASS_ENUM_TIMEOUT} amass enum -passive -d $domain -config $AMASS_CONFIG -timeout $AMASS_ENUM_TIMEOUT -json .tmp/amass_json.json 2>>"$LOGFILE" &>/dev/null
		[ -s ".tmp/amass_json.json" ] && cat .tmp/amass_json.json | jq -r '.name' | anew -q .tmp/amass_psub.txt
	[[ $RUNSUBFINDER == true ]] && subfinder -all -d "$domain" -silent -o .tmp/subfinder_psub.txt 2>>"$LOGFILE" >/dev/null		
	if [ -s "${GITHUB_TOKENS}" ]; then
		if [ "$DEEP" = true ]; then
			github-subdomains -d $domain -t $GITHUB_TOKENS -o .tmp/github_subdomains_psub.txt 2>>"$LOGFILE" >/dev/null
		else
			github-subdomains -d $domain -k -q -t $GITHUB_TOKENS -o .tmp/github_subdomains_psub.txt 2>>"$LOGFILE" >/dev/null
		fi
	fi
	if [ -s "${GITLAB_TOKENS}" ]; then
		gitlab-subdomains -d $domain -t $GITLAB_TOKENS > .tmp/gitlab_subdomains_psub.txt 2>>"$LOGFILE" >/dev/null
	fi

else
    if [[ "$SUBPASSIVE" = false ]]; then
        echo "${FUNCNAME[0]} skipped in this mode or defined in reconftw.cfg"
    else
        echo "${FUNCNAME[0]} is already processed, to force executing ${FUNCNAME[0]} delete $called_fn_dir/.${FUNCNAME[0]}"
    fi
fi
